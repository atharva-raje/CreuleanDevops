@page "/UpdateWorkItem/{id}"
@using Blazorise
@using Blazorise.Components
@using BusinessLOgic.Models
@using WebAPplication.UI.Apicall
@using WebAPplication.UI.UiModels
@inject NavigationManager NavManager
@inject WorkItemCall workitemcall
@inject UserAPiCall usercall
 
<Alert @ref="myAlert" Color="Color.Success">
    <AlertMessage>Success!</AlertMessage>
    <AlertDescription>You successfully updated the Work-Item!</AlertDescription>
    <CloseButton />
</Alert>
<Alert @ref="myAlertFailed" Color="Color.Danger">
    <AlertMessage>Failed!</AlertMessage>
    <AlertDescription>Failed to update a Work Item</AlertDescription>
    <CloseButton />
</Alert>
 

 

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Update Work-Item</h3>
    @* <div class="d-flex">
        <button class="btn btn-info me-2" @onclick="UploadAttachment">
            <i class="fas fa-paperclip"></i> Attachments
        </button>
        <button class="btn btn-info" @onclick="AddLink">
            <i class="fas fa-link"></i> Add Links
        </button>
    </div> *@
</div>

<EditForm Model="uIWorkItem" OnSubmit="UpdateWorkitem" >
    <DataAnnotationsValidator />
    <div class="form-row">
            <div class="col-md-12  ">
            <label class="fw-bold" for="name">Title</label>
                <InputText id="name" class="form-control shadow" @bind-Value="uIWorkItem.Name" />
            <ValidationMessage For="@(() => uIWorkItem.Name)" />
        </div>
    </div>
    <br/>
    <div class="row">
            <div class="col-md-12  ">
            <label class="fw-bold" for="description">Description</label>
                <InputTextArea id="description" class="form-control shadow" @bind-Value="uIWorkItem.Description" />
            <ValidationMessage For="@(() => uIWorkItem.Description)" />
        </div>
    </div>
    <br />
    <div class="row">
            <div class="col-md-3  ">
            <label class ="fw-bold" for="type">Type</label>
            <InputSelect id="statusSelect" class="form-control shadow" @bind-Value="uIWorkItem.TypeId" @oninput=TypeSelected>
                <option hidden value="">Please select an type</option>
                @foreach (var type in types)
                {
                    <option value="@type.TypeId">@type.TypeName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => uIWorkItem.TypeId)" />
        </div>
        <br />
            <div class="col-md-3  ">
            <label class="fw-bold" for="status">Status</label>
               <InputSelect id="statusSelect" class="form-control shadow" @bind-Value="uIWorkItem.StatusId" Disabled="@(!statuses.Any())">
                    <option hidden value="">Please select an status</option>
                @foreach (var status in statuses)
                {
                        <option value="@status.StatusId">@status.StatusName</option>
                }
            </InputSelect>
                <ValidationMessage For="@(() => uIWorkItem.StatusId)" />
        </div>
            <div class="col-md-3  ">
            <label class="fw-bold" id="Priorityselect">Priority</label>
            <InputSelect id="prioritySelect" class="form-control shadow" @bind-Value="uIWorkItem.PriorityId">
                <option hidden value="">Please select an priority</option>
                @foreach (var priority in priorites)
                {
                    <option value="@priority.PriorityId">@priority.PriorityName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => uIWorkItem.PriorityId)" />
        </div>
        <div class="col-md-3  ">
            <label class="fw-bold" for="name">Storypoints</label>
            <InputNumber id="storypoint" PlaceHolder="Enter storypoints" class="form-control shadow" @bind-Value="uIWorkItem.StoryPoints" Step="1" />
            <ValidationMessage For="@(() => uIWorkItem.StoryPoints)" />
        </div>
    </div>
    <br />
    <div class="row">

            <div class="col-md-3 ">
            <label class="fw-bold" for="area">Area</label>
            <Autocomplete TItem="AreaWithoutId" TValue="int"
                              Data="@areas"
                              @bind-SelectedValue="uIWorkItem.AreaId"
                              TextField="@(( item ) => item.AreaName)"
                              ValueField="@(( item ) => item.Id)"
                              @onchange="AreaOnChanged"
                              Placeholder="Please select an area" />
                <ValidationMessage For="@(() => uIWorkItem.AreaId)" />
        </div>
     
         <br />

            <div class="col-md-3  ">
            
            <label class="fw-bold" for="iteration">Iteration</label>
                <InputSelect id="iterationSelect" class="form-control  shadow" @bind-Value="uIWorkItem.IterationId" Disabled="@(!iterations.Any())">
                    <option hidden value="">Please select an iteration</option>
                @foreach (var iteration in iterations)
                {
                    <option value="@iteration.IterationId"  >@iteration.IterationName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => uIWorkItem.IterationId)" />
        </div>
        <br />
            <div class="col-md-3">
            <label class="fw-bold" for="status">Assign User</label>
                <InputSelect id="statusSelect" class="form-control shadow " @bind-Value="uIWorkItem.AssigneeName">
                    <option hidden value="">Please select an user</option>
                @foreach (var user in users)
                {
                        <option value="@user.UserName"><i class="bi bi-person-circle"></i>@user.UserName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => uIWorkItem.AssigneeName)" />
        </div>
        <div class="col-md-3">
            <label class="fw-bold" for="status">Assign Reporter</label>
            <InputSelect id="statusSelect" class="form-control shadow " @bind-Value="uIWorkItem.ReporterName">
                <option hidden value="">Please select an user</option>
                @foreach (var user in users)
                {
                    <option value="@user.UserName"><i class="bi bi-person-circle"></i>@user.UserName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => uIWorkItem.ReporterName)" />
        </div>
    </div>
    <br />
    <div class="row">
            <div class="col-md-3  ">
            <Label class="fw-bold" for="startdate">Expected start Date</Label>
                <Blazorise.DateEdit TValue="DateTime" class="shadow" @bind-Date="uIWorkItem.ExpectedStartDate" />
            <ValidationMessage For="@(() => uIWorkItem.ExpectedStartDate )" />
             
        </div>
        <br />
            <div class="col-md-3 ">
                <Label class="fw-bold" for="enddate">Expected Due Date</Label>
                <Blazorise.DateEdit TValue="DateTime" class="shadow" @bind-Date="uIWorkItem.ExpectedEndDate" />
            <ValidationMessage For="@(() =>uIWorkItem.ExpectedEndDate )" />
             
        </div>
        <div class="col-md-3  ">
            <Label class="fw-bold" for="ExpectedEndDate">Actual start Date</Label>
            <Blazorise.DateEdit TValue="DateTime" class="shadow" @bind-Date="uIWorkItem.ActualStartDate" />
            <ValidationMessage For="@(() => uIWorkItem.ActualStartDate)" />
        </div>
        <div class="col-md-3  ">
            <Label class="fw-bold" for="ExpectedEndDate">Actual Due Date</Label>
            <Blazorise.DateEdit TValue="DateTime" class="shadow" @bind-Date="uIWorkItem.ActualEndDate" />
            <ValidationMessage For="@(() => uIWorkItem.ActualEndDate)" />
        </div>

    </div>
    <br />
    <button type="submit" class="btn btn-primary">Update</button>
</EditForm>
<br />
<Tabs SelectedTab="@selectedTab" Class="cursor-pointer" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        
        <Tab Name="Comments">Comments</Tab>
        <Tab Name="Uploads">Attachments</Tab>
        <Tab Name="Links">Links</Tab>
    </Items>
    <Content>
         
        <TabPanel Name="Comments">
            <Comments userId="@userid" workitemId="@(id)"></Comments>
        </TabPanel>
        <TabPanel Name="Uploads">
            @if (isFileUploadTabSelected)
            {
                <FileUpload id="@id"></FileUpload>
            }
        </TabPanel>
        <TabPanel Name="Links">
             <Links sourceWorkItemId="@id" ></Links>
        </TabPanel>
    </Content>
</Tabs>
<br />
@*<Comments userId="@userid" workitemId="@(id)"></Comments>*@
 <br />
@code {
    [Parameter] public string id{ get; set; }
    private List<StatusModelWithoutId> statuses = new List<StatusModelWithoutId>();
    private List<UserModel> users = new List<UserModel>();
    private List<PriorityModel> priorites = new List<PriorityModel>();
    private List<TypeModel> types = new List<TypeModel>();
    public UIWorkItem uIWorkItem = new UIWorkItem();
    private bool saved = false;
    private int userid;
    Alert myAlert;
    Alert myAlertFailed;
    private List<AreaWithoutId> areas = new List<AreaWithoutId>();
    private List<IterationWIthoutId> iterations = new List<IterationWIthoutId>();
    private bool isFileUploadTabSelected = false;

     
    private async Task UpdateWorkitem()
    {

        try
        {
            saved = false;
            var result = await workitemcall.UpdateWorkItem(uIWorkItem);
            Console.WriteLine("Modal shown");
            saved = true;
            //NavManager.NavigateTo("/UpdateWorkItem/{id}", forceLoad: true);
            if (result.IsSuccessStatusCode)
            {
                myAlert.Show();
                uIWorkItem = await workitemcall.GetWorkItemById(id);
                userid = await usercall.GetUserIdByName(uIWorkItem.AssigneeName);
                var areas1 = await workitemcall.GetAreas();
                areas = areas1.ToList();
                var t = await workitemcall.GetTypeModels();
                types = t.ToList();
                var p = await workitemcall.GetPriorityModels();
                priorites = p.ToList();
                var u = await workitemcall.GetUsers();
                users = u.ToList();
                StateHasChanged();
            }
            else
            {
                myAlertFailed.Show();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private async void TypeSelected(ChangeEventArgs e)
    {
        var typeSelected = Int32.Parse(e.Value.ToString());
        await TypeSelected(typeSelected);

    }
    private async Task TypeSelected(int typeSelected)
    {
        var statuses1 = await workitemcall.GetStatusModels(typeSelected);
        statuses = statuses1.ToList();
        if (!statuses.Any(status => status.StatusId == uIWorkItem.StatusId))
        {
            uIWorkItem.StatusId = null;
        }
        StateHasChanged();

    }
    private async void AreaOnChanged(ChangeEventArgs e)
    {
        var areaSelected = Int32.Parse(e.Value.ToString());
        await AreaSelected(areaSelected);

    }
    private async Task AreaSelected(int areaSelected)
    {
        var iterations1 = await workitemcall.Getiterations(areaSelected);
        iterations = iterations1.ToList();
        if (!iterations.Any(iteration => iteration.IterationId == uIWorkItem.IterationId))
        {
            uIWorkItem.IterationId = null;
        }
        StateHasChanged();
    }

    private async Task UploadAttachment()
    {
        NavManager.NavigateTo($"/upload/{id}");
    }
    private async Task  AddLink()
    {
        NavManager.NavigateTo($"/linkworkitems/{id}");
    }
    string selectedTab = "Comments";

    private async Task OnSelectedTabChanged(string name)
    {
        selectedTab = name;
        if (selectedTab == "Uploads")
        {
            isFileUploadTabSelected = true;

        }
        else
        {
            isFileUploadTabSelected = false;
        }
    }
  

    protected override async Task OnInitializedAsync()
    {
        uIWorkItem = await workitemcall.GetWorkItemById(id);
        var areas1 = await workitemcall.GetAreas();
        areas = areas1.ToList();
        var t = await workitemcall.GetTypeModels();
        types = t.ToList();
        var p = await workitemcall.GetPriorityModels();
        priorites = p.ToList();
        await AreaSelected(uIWorkItem.AreaId);
        await TypeSelected(uIWorkItem.TypeId);
        userid = await usercall.GetUserIdByName(uIWorkItem.AssigneeName);
        uIWorkItem.ActualStartDate = DateTime.Now;
        uIWorkItem.ActualEndDate = DateTime.Now;
        var u = await workitemcall.GetUsers();
        users = u.ToList();
    }
}
<style>
    .cursor-pointer {
        cursor: pointer;
    }
</style>

