@using Blazorise
@using Blazorise.Components
@using BusinessLOgic.Models
@using Microsoft.AspNetCore.Components.Forms
@using Apicall
@using SharedEnums
@using WebAPplication.UI.UiModels
@inject WorkItemCall workitemcall
@inject NavigationManager NavManager
@inject WorkItemLinkApiCall linkcall

<div class="container mt-4">
    <h1 class="mb-4">@pageTitle</h1>
    <div class="row mb-3">
        <div class="col">
            <label for="linkType" class="form-label">Link Type</label>
            <select id="linkType" class="form-select" @bind="linkType">
                <option value="">Select a type</option>
                @foreach (LinkType linkTypeEnum in Enum.GetValues(typeof(LinkType)))
                {
                    <option value="@(Convert.ToInt32(linkTypeEnum))">@linkTypeEnum</option>
                }
            </select>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col">
            <label  class="fw-bold">Linking To</label>
            <AutoComponentForLinks TItem="WorkItemModel" Items="@workItems" DisplayPropertyName="Name" IdPropertyName="WorkItemId" ValueChanged="OnValueChangedLinks" />
        </div>
    </div>

    <div class="row">
        <div class="col">
            <button class="btn btn-primary" @onclick="LinkWorkItems">Link Work Items</button>
        </div>
    </div>

    @if (linkingResult != null)
    {
        <div class="row mt-3">
            <div class="col">
                <div class="alert @linkingResultClass">
                    @linkingResult
                </div>
            </div>
        </div>
    }
    <br />
    @if (categorizedLinks != null && categorizedLinks.Count > 0)
    {
        <Accordion>
            @foreach (var category in categorizedLinks)
            {
                <AccordionItem>
                    <AccordionHeader>
                        <Heading Size="HeadingSize.Is5">
                            <AccordionToggle>@category.Key</AccordionToggle>
                        </Heading>
                    </AccordionHeader>
                    <AccordionBody>
                        <ul>
                            @foreach (var link in category.Value)
                            {
                                <li>
                                    <NavLink href=@($"/UpdateWorkItem/{@link.targetWorkItemId}")>
                                        @link.targetWorkItemId
                                    </NavLink>
                                </li>
                                <br />
                            }
                        </ul>
                    </AccordionBody>
                </AccordionItem>
            }
        </Accordion>
    }
</div>

@code {
    private List<WorkItemModel> workItems = new List<WorkItemModel>();
    private Dictionary<string, List<WorkItemLinkModel>> categorizedLinks = new Dictionary<string, List<WorkItemLinkModel>>();
    [Parameter] public string sourceWorkItemId { get; set; }
    private string targetWorkItemId;
    private string pageTitle;
    private int linkType; // Change to int
    private string linkingResult;
    private string linkingResultClass;
    bool accordionItem1Visible = true;

    protected override async Task OnInitializedAsync()
    {
        var workItems1 = await workitemcall.GetWorkItems();
        workItems = workItems1.ToList();
        pageTitle = $"Link Work Items - {sourceWorkItemId}";

        await FetchLinks();
    }

    private async Task FetchLinks()
    {
        var links = await linkcall.GetLinksForWorkItem(sourceWorkItemId);

        categorizedLinks = links
            .GroupBy(link => link.LinkTypeName)
            .ToDictionary(group => group.Key, group => group.ToList());
    }

    private async Task LinkWorkItems()
    {
        var result = await linkcall.LinkWorkItems(sourceWorkItemId, targetWorkItemId, linkType);
        if (result)
        {
            linkingResult = "Work items linked successfully.";
            linkingResultClass = "alert-success";
            await FetchLinks();
        }
        else
        {
            linkingResult = "Failed to link work items.";
            linkingResultClass = "alert-danger";
        }
    }
    private async void OnValueChangedLinks(string id)
    {
        targetWorkItemId = id;
    }
}
